db_name = "dfs://snapshot_SH_L2_TSDB_100G"
tb_name = "snapshot_SH_L2_TSDB"     
db = database(db_name)
tb = db.loadTable(tb_name)

clearAllCache()  // 清理缓存

// 2020.01.01-05 09:30:00 11:30:00 13:00:00 15:00:00

// 查询总数
select count(*) from tb  // 192,080,000

// 点查询
select * from tb where securityid = 'sz002582',
tradetime = 2020.01.02 11:30:00

// 范围查询
select securityid, tradetime, OpenPx, PreClosePx from tb 
where securityid in ('sz002582', 'sz001900', 'sz003183', 'sz000002'),
date(tradetime) between 2020.01.01 : 2020.01.02,
PreClosePx < 60

// top1000+排序
select top 1000 * from tb
where securityid in ('sz000001', 'sz000002', 'sz000003', 'sz000004'),
time(tradetime) >= time(09:30:000), time(tradetime) <= time(11:30:00.000), 
OpenPx > PreClosePx
order by (OpenPx - PreClosePx) desc

// 聚合查询：单分区维度
select max(OpenPx) as max_OpenPx, min(PreClosePx) as min_PreClosePx from tb
where securityid = 'sz001664',
OpenPx > PreClosePx
group by month(tradetime)

// 聚合查询：多分区维度 + 排序
select std(OpenPx) as std_open, sum(BidOrderQty0) as 	 from tb
where
securityid in ('sz000922', 'sz003925', 'sz000505', 'sz002435'),
tradetime >= timestamp("2020.01.01 09:30:00")
group by securityid, month(tradetime)
order by securityid asc

// 经典查询：按 [多个股票代码、日期，时间范围、报价范围] 过滤，查询 [股票代码、时间、卖方与买方报价]
select * from tb
where
securityid in ('sz002435', 'sz002436', 'sz002437', 'sz002438'),
tradetime >= timestamp("2020.01.01 09:30:00"), tradetime <= timestamp("2020.01.02 11:30:00"),
BidPrice0 > 60, OfferPrice0 > BidPrice0

// 窗口计算：查询某只股票某天内时间的差值
select securityid, tradetime, deltas(BidPrice0) as time_diff from tb
where
securityid = 'sz002436',
date(tradetime) = 2020.01.02
order by tradetime asc

// 聚合计算：计算某天中每个股票在每分钟的最大卖方报价与最小买方报价之差
select max(OfferPrice0) - min(BidPrice0) as gap from tb
where
tradetime = 2020.01.01,
BidPrice0 > 0,
OfferPrice0 > BidPrice0
group by securityid, minute(tradetime) as minute

// 统计计算：计算某天中某列的中位数（ClickHouse查询median时是近似结果，而DolphinDB是精确结果）
select median(OfferPrice0), median(BidPrice0) from tb
where
date(tradetime) = 2020.01.02,
securityid = 'sz002438'




// OOM 超内存
select * from tb where tradetime == 2020.01.01,BidPrice0 > 0,OfferPrice0 > BidPrice0 => Out of memory


// 4.1常用的SQL处理：计算每分钟内的最大`相对买卖价差` bid-ask spread = 2*(ASK-BID)/(ASK+BID)。askPrice卖价，bidPrice买价    
avgSpread = select max((OfferPrice0-BidPrice0)/(OfferPrice0+BidPrice0)*2) as avgSpread from tb where securityid=`sz000001, tradetime between 2020.01.03 09:30:00.000 : 2020.01.03 15:00:00.000, OfferPrice0>=BidPrice0 group by minute(tradetime) as minute

select max((OfferPrice0-BidPrice0)/(OfferPrice0+BidPrice0)*2) as avgSpread from tb 
where securityid=`sz000001, tradetime between 2020.01.03 09:30:00.000 : 2020.01.03 15:00:00.000, OfferPrice0>=BidPrice0 
group by minute(tradetime) as minute

select minute(tradetime) from tb limit 1;

plot(avgSpread.avgSpread, avgSpread.minute, "Average bid-ask spread per minute")

// select count(*) from quotes where date = 2020.06.01, symbol=`600600
// select time, askPrice1, bidPrice1 from quotes where date = 2020.06.01, symbol=`600600, time between 09:30:00.000 : 15:00:00.000, askPrice1>=bidPrice1

// 4.2context by：返回和组内元素数量相同的向量
// context by + cummax(), 计算到当前时刻交易量的累计最大值
t = select securityid, tradetime, cummax(totalVolumeTrade) as volume_cummax from tb where date(tradetime)=2020.01.04 context by securityid, tradetime

// context by + mavg(), 计算窗口均价，窗口大小=20
t = select securityid, tradetime, mavg(OfferPrice0, 20) as price_mavg1min from quotes where date=2020.01.04 context by securityid, tradetime

// context by + 聚合函数
t = select securityid, date, time, max(curVol) as volume_dailyMax from quotes where date=2020.06.01 context by symbol, date
// 计算高频因子 买卖量差/买卖总量 factor1 = (BID1+BID2-ASK1-ASK2)\(BID1+BID2+ASK1+ASK2)、factor2 = (BID1+BID2-ASK1-ASK2)\mavg(BID1+BID2+ASK1+ASK2,100)
t = select securityid, date, time, (2*bidVolume1+bidVolume2-2*askVolume1-askVolume2)\(2*bidVolume1+bidVolume2+2*askVolume1+askVolume2) as factor1,
	(2*bidVolume1+bidVolume2-2*askVolume1-askVolume2)\mavg((2*bidVolume1+bidVolume2+2*askVolume1+askVolume2),100) as factor2 from quotes 
	where date=2020.06.01, securityid>=`600000, time between 09:30:00.000 : 15:00:00.000 context by symbol order by symbol, date, time
// 100跳的平均买量和100跳平均卖量的60分钟相关系数
t = select securityid, date, time, mcorr(mavg(bidVolume1,100), mavg(askVolume1,100), 60) from quotes 
	where date=2020.06.01, securityid>=`600000, time between 09:30:00.000 : 15:00:00.000 context by symbol order by symbol, date, time

// 4.3pivot by：将某列内容重新排列按照两个维度
syms = `600000`600300`600400`600500`600600`600800`600900
pv = select last from quotes where date=2020.06.01, symbol in syms, time between 09:30:00.000 : 15:00:00.000 pivot by time, symbol
select top 10 * from pv;
// select * from quotes where time between 10:30:00.000 : 10:30:05.000
// ffill(): 使用前一个非null值填充
tmp = select ffill(last) from quotes where date=2020.06.01, symbol in syms, time between 09:30:00.000 : 15:00:00.000 pivot by time, symbol
select top 10 * from tmp;
// 计算组合投资的价值(各股票的持仓数量分别为100, 200, 400, 800, 600, 400, 300)
// select time, 100*C600000+200*C600300+400*C600400+800*C600500+600*C600600+400*C600800+300*C600900 from tmp;
select time, 100 * _"600000" + 200 * _"600300" + 400 * _"600400" + 800 * _"600500" + 600 * _"600600" + 400 * _"600800" + 300 * _"600900"  from tmp

// 4.4生成分钟级数据
// minuteBar = select first(last) as open, max(last) as high, min(last) as low, last(last) as last, sum(curVol) as volume from quotes 
// 			where date=2020.06.01, symbol>=`600000 group by symbol, date, minute(time) as minute;
// 建库建表
model = select top 1 symbol,date, minute(time) as minute, open, high, low, last, curVol as volume from quotes
		where date=2020.06.01, symbol=`600000
if(existsTable("dfs://level2", "minuteBar"))
	db.dropTable("minuteBar")
db.createPartitionedTable(model, "minuteBar", `date`symbol)
// 计算某天分钟级K线
def saveMinuteBar(t){
	minuteBar=select first(last) as open, max(last) as high, min(last) as low, last(last) as last, sum(curVol) as volume from t 
	where symbol>=`600000, time between 09:30:00.000 : 15:00:00.000 group by symbol, date, minute(time) as minute
	loadTable("dfs://level2", "minuteBar").append!(minuteBar)
	return minuteBar.size()
}
ds = sqlDS(<select symbol, date, time, last, curVol from quotes>)
mr(ds,saveMinuteBar)

// 4.5asof join：aj()函数分组根据除最后一个连接列外的其他连接列，每个分组根据最后一个连接列排序，返回最近匹配
// 寻找交易的最近一笔报价
trades = table(`600000`600300`600800 as symbol, take(2020.06.01,3) as date, [14:35:18.000, 14:30:30.000, 14:31:09.000] as time, [10.63, 3.12, 4.72] as tradePrice)
quotesTmp = select symbol, date, time, bidPrice1, askPrice1 from quotes where symbol in `600000`600300`600800 and date=2020.06.01
select * from aj(trades, quotesTmp, `symbol`date`time)
// 寻找另一只股票的最近报价数据
t1 = select symbol, date, time, askPrice1, bidPrice1 from quotes 
where date=2020.06.01, symbol=`600000, time between 09:30:00.000 : 15:00:00.000 
C600300 = select date, time, askPrice1, bidPrice1 from quotes 
where date=2020.06.01, symbol=`600300, time between 09:30:00.000 : 15:00:00.000 
t = aj(t1, C600300, `date`time)

// windows join: 
// 计算之前一分钟之内的总交易量
t = select symbol, date, time, curVol, askPrice1, bidPrice1 from quotes 
where date=2020.06.01, symbol>=`600000, time between 09:30:00.000 : 15:00:00.000 order by symbol, date, time
// -60000:-1 单位毫秒表示一分钟之前
t1 = wj(t, t, -60000:-1, <sum(curVol) as sumVolumePrev1m>, `symbol`date`time)

// 寻找一分钟之后第一笔第一档报价
t = select symbol, date, time, askPrice1, bidPrice1 from quotes
where date=2020.06.01, symbol>=`600000, time between 09:30:00.000 : 15:00:00.000 order by symbol, date, time
t1 = wj(t, t, 60000:70000, <[first(askPrice1) as firstAskPrice1In1m, first(bidPrice1) as firstBidPrice1In1m]>, `symbol`date`time)

// 4.6高阶函数
// 2020年6月1日交易量最大的100只股票的分钟级收益率的两两相关性
minuteBar = select first(last) as open, max(last) as high, min(last) as low, last(last) as last, sum(curVol) as volume from quotes 
where date=2020.06.01, symbol>=`600000 group by symbol, date, minute(time) as minute;  // 每分钟的
syms = (exec sum(volume) from minuteBar group by symbol order by sum_volume desc).symbol[0:100]  // 交易量最大的  // 默认名字：聚合函数_字段名
priceMatrix = exec last from minuteBar where symbol in syms pivot by minute, symbol  // exec返回一个值而不是table对象
retMatrix = each(def(x):ratios(x)-1, priceMatrix)  // 收益率 = ratios(x)-1
corrMatrix = pcross(corr, retMatrix);  // 并行执行corr(retMatrix, retMatrix). corr计算相关系数

// TODO: 实时行情处理


// 插入数据, 即使只插入一条数据，也要用表的形式
tmp = table(['sz002001'] as symbol, [2020.01.07T18:00:00.000] as timestamp, [0] as double, [0] as int) 
tmp = table(['sz003001'] as symbol, [2020.01.07T18:00:00.000] as timestamp, [0] as double, [0] as int) 
tmp = table(['sz004002'] as symbol, [2020.01.07T18:00:00.000] as timestamp, [0] as double, [0] as int) 
tb.append!(tmp)